from flask import Flask, jsonify, request, abort

app = Flask(__name__)

# In-memory database simulation
tasks = []
next_id = 1

def find_task(task_id):
    for task in tasks:
        if task['id'] == task_id:
            return task
    return None

@app.route('/tasks', methods=['POST'])
def create_task():
    global next_id
    data = request.get_json()
    if not data or 'name' not in data or 'description' not in data:
        abort(400, description="Missing 'name' or 'description' in the request body.")
    
    task = {
        'id': next_id,
        'name': data['name'],
        'description': data['description'],
        'completed': False
    }
    tasks.append(task)
    next_id += 1
    return jsonify(task), 201

@app.route('/tasks', methods=['GET'])
def get_tasks():
    return jsonify(tasks)

@app.route('/tasks/<int:task_id>', methods=['GET'])
def get_task(task_id):
    task = find_task(task_id)
    if task is None:
        abort(404, description=f"Task with id {task_id} not found.")
    return jsonify(task)

@app.route('/tasks/<int:task_id>', methods=['PUT'])
def update_task(task_id):
    task = find_task(task_id)
    if task is None:
        abort(404, description=f"Task with id {task_id} not found.")
    
    data = request.get_json()
    task['name'] = data.get('name', task['name'])
    task['description'] = data.get('description', task['description'])
    task['completed'] = data.get('completed', task['completed'])
    return jsonify(task)

@app.route('/tasks/<int:task_id>', methods=['DELETE'])
def delete_task(task_id):
    task = find_task(task_id)
    if task is None:
        abort(404, description=f"Task with id {task_id} not found.")
    
    tasks.remove(task)
    return jsonify({'success': True})

@app.errorhandler(400)
def bad_request(error):
    return jsonify(error=str(error)), 400

@app.errorhandler(404)
def not_found(error):
    return jsonify(error=str(error)), 404

if __name__ == '__main__':
    app.run(debug=True)
